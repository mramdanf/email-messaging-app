version: '3'

services:
  db:
    container_name: db
    image: mysql:8.0
    restart: unless-stopped
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - ./db-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    healthcheck:
      test: "/usr/bin/mysql --user=${DB_USERNAME} --password=${DB_PASSWORD} --execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10

  email-service:
    container_name: email-service
    build:
      context: ./email-service
      dockerfile: ./email-service.Dockerfile
      args:
        - APP_PORT=${EMAIL_SERVICE_PORT}
    ports:
      - ${EMAIL_SERVICE_PORT}:${EMAIL_SERVICE_PORT}
    environment:
      APP_PORT: ${EMAIL_SERVICE_PORT}

  database-service:
    build:
      context: ./database-service
      dockerfile: ./database-service.Dockerfile
      args:
        - APP_PORT=${DATABASE_SERVICE_PORT}
        - DB_USERNAME=${DB_USERNAME}
        - DB_HOSTNAME=${DB_HOSTNAME}
        - DB_NAME=${DB_NAME}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_DIALECT=${DB_DIALECT}
        - DB_PORT=${DB_PORT}
    command: sh -c "/wait && npm run db:reset && npm start"
    ports:
      - ${DATABASE_SERVICE_PORT}:${DATABASE_SERVICE_PORT}
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_HOSTNAME: ${DB_HOSTNAME}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DIALECT: ${DB_DIALECT}
      WAIT_HOSTS: db:${DB_PORT}, email-service:${EMAIL_SERVICE_PORT}
      CRON_SEND_BIRTHDAY_INTERVAL_SEC: ${CRON_SEND_BIRTHDAY_INTERVAL_SEC}
      CRON_RESEND_BIRTHDAY_INTERVAL_SEC: ${CRON_RESEND_BIRTHDAY_INTERVAL_SEC}
      SENT_BIRTHDAY_AT_HOUR: ${SENT_BIRTHDAY_AT_HOUR}
    depends_on:
      db:
        condition: service_healthy
      email-service:
        condition: service_started 

volumes:
  db-data: